#!/usr/bin/python

import json
import logging
import logging.handlers
import psycopg2
import psycopg2.extensions
import select
import sys
import time
import urllib2

# We try to balance the following goals:
#
# * reasonably low latency for notifications
# * batching to reduce calls
# * rate limiting so we don't get banned
# * don't cause too many devices to wake up and DoS-attack our servers
#
# Here are the rules we follow:
#
# * don't exceed (GOOGLE|APPLE)_BATCH_SIZE
# * don't exceed MAX_(GOOGLE|APPLE)_REQUESTS_PER_SECOND
# * after an error response, don't try again until 
#   (GOOGLE|APPLE)_INITIAL_BACKOFF seconds
# * after each successive error, double the time until it reaches
#   (GOOGLE|APPLE)_MAX_BACKOFF seconds
#
# Here's a questionable idea not yet implement:
#
# * consider waiting up to BATCH_WAIT_PERIOD to try to fill bigger
#   batches (this introduces latency immediately, but might
#   reduce latency overall depending on the *_REQUESTS_PER_SECOND
#   setting...)

class RateLimiter:
    """A simple mechanism for keeping track of when we are next
    allowed to make requests to a remote service, to avoid having our
    asses banned by the walled garden overlords."""

    def __init__(self, sender, max_requests_per_second, initial_backoff, max_backoff, batch_size):
        """Constructor."""
        self.sender = sender
        self.min_time_between_requests = 1.0 / max_requests_per_second
        self.initial_backoff = initial_backoff
        self.max_backoff = max_backoff
        self.batch_size = batch_size
        self.next_time = 0
        self.backoff = self.initial_backoff
        self.tokens = []
        
    def success(self, t):
        """Record that we just made a succesful request at time t."""
        self.next_time = t + self.min_time_between_requests
        self.backoff = self.initial_backoff

    def failure(self, t):
        """Record that we just made a request at time t and it failed."""
        self.next_time = t + max(self.backoff, self.min_time_between_requests)
        self.backoff = min(self.backoff * 2, self.max_backoff)        

    def can_send(self, t):
        """Check if we can send at time t."""
        return t >= self.next_time;

    def time_until_next_work(self, t):
        """How long after time t does this rate limiter next want
        'work' to be called?"""
        if len(self.tokens) == 0:
            return 10 # means I don't have any work, "forever"
        else:
            return max(self.next_time - t, 0)

    def add(self, token):
        """Add a token to the output buffer."""
        self.tokens.append(token)
        
    def work(self, t):
        """Send a batch if possible, otherwise do nothing.  Returns a
        list of tokens which the sender reported as defunct and should
        be removed."""
        if not self.can_send(t):
            return []
        if len(self.tokens) == 0:
            return []
        try:
            ok, removes = self.sender(self.tokens[:self.batch_size])
            if ok:
                self.success(t)
                self.tokens = self.tokens[self.batch_size:]
                return removes
            else:
                self.failure(t)
                return []
        except Exception, e:
            # TODO logging etc
            self.failure(t)
            return []

class GoogleSender:
    """A functor for sending a batch of registration IDs to Google
    Cloud Notification to tickle a bunch of Android devices."""

    def __init__(self, api_key):
        self.api_key = api_key

    def __call__(self, batch):
        # http://developer.android.com/google/gcm/server.html
        url = "https://android.googleapis.com/gcm/send"
        headers = { "Content-type": "application/json",
                    "Authorization": "key=" + self.api_key }
        data = { "registration_ids": batch,
                 "collapse_key": "tickle",
                 "dry_run": True }
        # TODO try to use http-keepalive to reuse socket between
        # requests?
        data_json = json.dumps(data)
        logger.debug("GoogleSender -- request = %s", data_json)
        request = urllib2.Request(url, data_json, headers)
        f = urllib2.urlopen(request)
        response_json = f.read()
        response = json.loads(response_json)
        logger.debug("GoogleSender -- response = %s", response_json)
        removes = []
        ok = False
        if u"results" in response and len(response[u"results"]) == len(batch):
            for token, result in zip(batch, response[u"results"]):
                if u"error" in result:
                    if result[u"error"] in ("InvalidRegistration", "NotRegistered"):
                        # these tokens need to be forgotten according to Google
                        logger.info("GoogleSender -- we should forget about token '%s'", token)
                        removes.append(token)
            ok = True
            # TODO check result thoroughly, log errors if we can't understand it
        return ok, removes

class AppleSender:
    """A functor for sending a batch of device tokens to Apple APNS in
    order to tickle a bunch of Jesus phones."""

    def __init__(self, cert_path):
        self.cert_path = cert_path

    def __call__(self, batch):
        # TODO http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1
        logger.error("AppleSender needs to learn how to send")
        return False, []

class DbConsumer:
    """A mechanism for pulling profile IDs from "tickle_queue", with
    transparent reconnection."""

    def __init__(self, dsn):
        self.dsn = dsn
        self.conn = None

    def reconnect(self):
        logger.info("DbConsumer -- connecting to %s...", self.dsn)
        self.conn = psycopg2.connect(self.dsn)
        self.cursor = self.conn.cursor()
        self.cursor.execute("SET application_name = 'speedy_notifier consumer'")
        logger.info("DbConsumer -- connected")

    def forget_tokens(self, apple_tokens, google_tokens):
        """Forget tokens that have been rejected by Apple/Google."""
        try:
            if self.conn == None:
                self.reconnect()
            for x in apple_tokens:
                self.cursor.execute("""UPDATE speedycrew.device
                                          SET apple_device_token = NULL
                                        WHERE apple_device_token = %s""",
                                    (x,))
                self.cursor.execute("""COMMIT""")
            for x in google_tokens:
                self.cursor.execute("""UPDATE speedycrew.device
                                          SET google_registration_id = NULL
                                        WHERE google_registration_id = %s""",
                                    (x,))
                self.cursor.execute("""COMMIT""")
        except Exception, e:
            logger.error("DbConsumer.forget_tokens: %s", str(e))
            try: self.conn.close()
            except: pass
            self.cursor = None
            self.conn = None
            time.sleep(1)

    def pull(self):
        """Returns a list of Apple device tokens and a list of Google
        registration IDs associated with the device in the
        tickle_queue, and clears the tickle_queue."""
        apple_device_tokens = []
        google_registration_ids = []
        try:
            if self.conn == None:
                self.reconnect()
            self.cursor.execute("""BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ""")
            self.cursor.execute("""SELECT d.google_registration_id, d.apple_device_token
                                     FROM speedycrew.device d
                                     JOIN speedycrew.tickle_queue q ON d.profile = q.profile
                                    WHERE d.google_registration_id IS NOT NULL
                                       OR d.apple_device_token IS NOT NULL""")
            for google_registration_id, apple_device_token in self.cursor:
                if google_registration_id:
                    logger.debug("DbConsumer.pull got google_registration_id = %s", google_registration_id)
                    google_registration_ids.append(google_registration_id)
                elif apple_device_token:
                    logger.debug("DbConsumer.pull got apple_device_token = %s", apple_device_token)
                    apple_device_tokens.append(apple_device_token)
            # REPEATABLE READ says we can't delete anything here that
            # we didn't see above
            self.cursor.execute("""DELETE FROM speedycrew.tickle_queue""")
            self.cursor.execute("""COMMIT""")
            
        except Exception, e:
            logger.error("Failure when trying to consume from tickle_queue table: %s", str(e))
            try: self.conn.close()
            except: pass
            self.cursor = None
            self.conn = None
            time.sleep(1) # prevents reconnect attempts in tight loop
        return apple_device_tokens, google_registration_ids

class DbListener:
    """A mechanism for waiting for PostgreSQL NOTIFY events, with
    transparent reconnection."""

    def __init__(self, dsn):
        self.dsn = dsn
        self.conn = None

    def reconnect(self):
        logger.info("DbListener -- connecting to %s...", self.dsn)
        self.conn = psycopg2.connect(self.dsn)
        self.conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = self.conn.cursor()
        cursor.execute("SET application_name = 'speedy_notifier listener'")
        cursor.execute("LISTEN tickle")
        logger.info("DbListener -- connected")

    def wait_for_notify(self, timeout):
        """Returns True if one or more NOTIFY messages was received,
        and False if the timeout was reached, or there was a database
        connection error."""
        try:
            if self.conn == None:
                self.reconnect()
            if select.select([self.conn], [], [], timeout) != ([], [], []):
                # http://initd.org/psycopg/docs/advanced.html
                self.conn.poll()
                while self.conn.notifies:
                    logger.debug("DbListener.wait_for_notify -- received NOTIFY")
                    notify = self.conn.notifies.pop()
                return True
            else:
                return False            
        except Exception, e:
            logger.error("DbListener.wait_for_notify -- %s", str(e))
            try:
                self.conn.close()
            except:
                pass
            self.conn = None
            time.sleep(1) # prevents reconnect attempts in tight loop
            return False

def run(config):

    logger.info("starting")
    listener = DbListener(config["POSTGRES_DSN"])
    consumer = DbConsumer(config["POSTGRES_DSN"])

    # TODO use advisory locks to make sure that only one speedy_notifier is active?
    # TODO provide tidy exit/shutdown

    apple_rate_limiter = RateLimiter(AppleSender(config["APPLE_CERT_PATH"]),
                                     config["APPLE_MAX_REQUESTS_PER_SECOND"],
                                     config["APPLE_INITIAL_BACKOFF"],
                                     config["APPLE_MAX_BACKOFF"],
                                     config["APPLE_BATCH_SIZE"])

    google_rate_limiter = RateLimiter(GoogleSender(config["GOOGLE_API_KEY"]),
                                      config["GOOGLE_MAX_REQUESTS_PER_SECOND"],
                                      config["GOOGLE_INITIAL_BACKOFF"],
                                      config["GOOGLE_MAX_BACKOFF"],
                                      config["GOOGLE_BATCH_SIZE"])

    while True:
        now = time.time()
        apple_rejected_tokens = apple_rate_limiter.work(now)
        google_rejected_tokens = google_rate_limiter.work(now)
        consumer.forget_tokens(apple_rejected_tokens, google_rejected_tokens)
        wait_time = min(apple_rate_limiter.time_until_next_work(now),
                        google_rate_limiter.time_until_next_work(now))
        if listener.wait_for_notify(wait_time):
            apple_tokens, google_tokens = consumer.pull()
            for token in apple_tokens:
                apple_rate_limiter.add(token)
            for token in google_tokens:
                google_rate_limiter.add(token)

logger = logging.getLogger("speedy_notifier")

if __name__ == "__main__":
    # TODO make this into an honest daemon, package etc
    config_path = sys.argv[1]
    config = {}
    execfile(config_path, config)
    logger.setLevel(config["LOG_LEVEL"])
    handler = logging.handlers.TimedRotatingFileHandler(config["LOG_NAME"],
                                                        when = 'midnight',
                                                        backupCount = config["LOG_KEEP"])
    handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
    logger.addHandler(handler)
    run(config)
